// Generated by the protocol buffer compiler.  DO NOT EDIT!
// source: identified_object.proto
#pragma warning disable 1591, 0612, 3021
#region Designer generated code

using pb = global::Google.Protobuf;
using pbc = global::Google.Protobuf.Collections;
using pbr = global::Google.Protobuf.Reflection;
using scg = global::System.Collections.Generic;
/// <summary>Holder for reflection information generated from identified_object.proto</summary>
public static partial class IdentifiedObjectReflection {

  #region Descriptor
  /// <summary>File descriptor for identified_object.proto</summary>
  public static pbr::FileDescriptor Descriptor {
    get { return descriptor; }
  }
  private static pbr::FileDescriptor descriptor;

  static IdentifiedObjectReflection() {
    byte[] descriptorData = global::System.Convert.FromBase64String(
        string.Concat(
          "ChdpZGVudGlmaWVkX29iamVjdC5wcm90byKPAgoKT2JqZWN0TGlzdBItCgdv",
          "YmplY3RzGAEgAygLMhwuT2JqZWN0TGlzdC5JZGVudGlmaWVkT2JqZWN0GtEB",
          "ChBJZGVudGlmaWVkT2JqZWN0EgwKBHR5cGUYASABKAkSCwoDdWlkGAIgASgN",
          "Eg8KB2NlbnRlclgYAyABKAISDwoHY2VudGVyWRgEIAEoAhIPCgdjZW50ZXJa",
          "GAUgASgCEgwKBHRvcFgYBiABKAISDAoEdG9wWRgHIAEoAhIMCgR0b3BaGAgg",
          "ASgCEg8KB2JvdHRvbVgYCSABKAISDwoHYm90dG9tWRgKIAEoAhIPCgdib3R0",
          "b21aGAsgASgCEhIKCmNvbmZpZGVuY2UYDCABKAJiBnByb3RvMw=="));
    descriptor = pbr::FileDescriptor.FromGeneratedCode(descriptorData,
        new pbr::FileDescriptor[] { },
        new pbr::GeneratedClrTypeInfo(null, new pbr::GeneratedClrTypeInfo[] {
          new pbr::GeneratedClrTypeInfo(typeof(global::ObjectList), global::ObjectList.Parser, new[]{ "Objects" }, null, null, new pbr::GeneratedClrTypeInfo[] { new pbr::GeneratedClrTypeInfo(typeof(global::ObjectList.Types.IdentifiedObject), global::ObjectList.Types.IdentifiedObject.Parser, new[]{ "Type", "Uid", "CenterX", "CenterY", "CenterZ", "TopX", "TopY", "TopZ", "BottomX", "BottomY", "BottomZ", "Confidence" }, null, null, null)})
        }));
  }
  #endregion

}
#region Messages
public sealed partial class ObjectList : pb::IMessage<ObjectList> {
  private static readonly pb::MessageParser<ObjectList> _parser = new pb::MessageParser<ObjectList>(() => new ObjectList());
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pb::MessageParser<ObjectList> Parser { get { return _parser; } }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static pbr::MessageDescriptor Descriptor {
    get { return global::IdentifiedObjectReflection.Descriptor.MessageTypes[0]; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  pbr::MessageDescriptor pb::IMessage.Descriptor {
    get { return Descriptor; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectList() {
    OnConstruction();
  }

  partial void OnConstruction();

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectList(ObjectList other) : this() {
    objects_ = other.objects_.Clone();
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public ObjectList Clone() {
    return new ObjectList(this);
  }

  /// <summary>Field number for the "objects" field.</summary>
  public const int ObjectsFieldNumber = 1;
  private static readonly pb::FieldCodec<global::ObjectList.Types.IdentifiedObject> _repeated_objects_codec
      = pb::FieldCodec.ForMessage(10, global::ObjectList.Types.IdentifiedObject.Parser);
  private readonly pbc::RepeatedField<global::ObjectList.Types.IdentifiedObject> objects_ = new pbc::RepeatedField<global::ObjectList.Types.IdentifiedObject>();
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public pbc::RepeatedField<global::ObjectList.Types.IdentifiedObject> Objects {
    get { return objects_; }
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override bool Equals(object other) {
    return Equals(other as ObjectList);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public bool Equals(ObjectList other) {
    if (ReferenceEquals(other, null)) {
      return false;
    }
    if (ReferenceEquals(other, this)) {
      return true;
    }
    if(!objects_.Equals(other.objects_)) return false;
    return true;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override int GetHashCode() {
    int hash = 1;
    hash ^= objects_.GetHashCode();
    return hash;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public override string ToString() {
    return pb::JsonFormatter.ToDiagnosticString(this);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void WriteTo(pb::CodedOutputStream output) {
    objects_.WriteTo(output, _repeated_objects_codec);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public int CalculateSize() {
    int size = 0;
    size += objects_.CalculateSize(_repeated_objects_codec);
    return size;
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(ObjectList other) {
    if (other == null) {
      return;
    }
    objects_.Add(other.objects_);
  }

  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public void MergeFrom(pb::CodedInputStream input) {
    uint tag;
    while ((tag = input.ReadTag()) != 0) {
      switch(tag) {
        default:
          input.SkipLastField();
          break;
        case 10: {
          objects_.AddEntriesFrom(input, _repeated_objects_codec);
          break;
        }
      }
    }
  }

  #region Nested types
  /// <summary>Container for nested types declared in the ObjectList message type.</summary>
  [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
  public static partial class Types {
    public sealed partial class IdentifiedObject : pb::IMessage<IdentifiedObject> {
      private static readonly pb::MessageParser<IdentifiedObject> _parser = new pb::MessageParser<IdentifiedObject>(() => new IdentifiedObject());
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pb::MessageParser<IdentifiedObject> Parser { get { return _parser; } }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public static pbr::MessageDescriptor Descriptor {
        get { return global::ObjectList.Descriptor.NestedTypes[0]; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      pbr::MessageDescriptor pb::IMessage.Descriptor {
        get { return Descriptor; }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IdentifiedObject() {
        OnConstruction();
      }

      partial void OnConstruction();

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IdentifiedObject(IdentifiedObject other) : this() {
        type_ = other.type_;
        uid_ = other.uid_;
        centerX_ = other.centerX_;
        centerY_ = other.centerY_;
        centerZ_ = other.centerZ_;
        topX_ = other.topX_;
        topY_ = other.topY_;
        topZ_ = other.topZ_;
        bottomX_ = other.bottomX_;
        bottomY_ = other.bottomY_;
        bottomZ_ = other.bottomZ_;
        confidence_ = other.confidence_;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public IdentifiedObject Clone() {
        return new IdentifiedObject(this);
      }

      /// <summary>Field number for the "type" field.</summary>
      public const int TypeFieldNumber = 1;
      private string type_ = "";
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public string Type {
        get { return type_; }
        set {
          type_ = pb::ProtoPreconditions.CheckNotNull(value, "value");
        }
      }

      /// <summary>Field number for the "uid" field.</summary>
      public const int UidFieldNumber = 2;
      private uint uid_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public uint Uid {
        get { return uid_; }
        set {
          uid_ = value;
        }
      }

      /// <summary>Field number for the "centerX" field.</summary>
      public const int CenterXFieldNumber = 3;
      private float centerX_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float CenterX {
        get { return centerX_; }
        set {
          centerX_ = value;
        }
      }

      /// <summary>Field number for the "centerY" field.</summary>
      public const int CenterYFieldNumber = 4;
      private float centerY_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float CenterY {
        get { return centerY_; }
        set {
          centerY_ = value;
        }
      }

      /// <summary>Field number for the "centerZ" field.</summary>
      public const int CenterZFieldNumber = 5;
      private float centerZ_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float CenterZ {
        get { return centerZ_; }
        set {
          centerZ_ = value;
        }
      }

      /// <summary>Field number for the "topX" field.</summary>
      public const int TopXFieldNumber = 6;
      private float topX_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float TopX {
        get { return topX_; }
        set {
          topX_ = value;
        }
      }

      /// <summary>Field number for the "topY" field.</summary>
      public const int TopYFieldNumber = 7;
      private float topY_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float TopY {
        get { return topY_; }
        set {
          topY_ = value;
        }
      }

      /// <summary>Field number for the "topZ" field.</summary>
      public const int TopZFieldNumber = 8;
      private float topZ_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float TopZ {
        get { return topZ_; }
        set {
          topZ_ = value;
        }
      }

      /// <summary>Field number for the "bottomX" field.</summary>
      public const int BottomXFieldNumber = 9;
      private float bottomX_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float BottomX {
        get { return bottomX_; }
        set {
          bottomX_ = value;
        }
      }

      /// <summary>Field number for the "bottomY" field.</summary>
      public const int BottomYFieldNumber = 10;
      private float bottomY_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float BottomY {
        get { return bottomY_; }
        set {
          bottomY_ = value;
        }
      }

      /// <summary>Field number for the "bottomZ" field.</summary>
      public const int BottomZFieldNumber = 11;
      private float bottomZ_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float BottomZ {
        get { return bottomZ_; }
        set {
          bottomZ_ = value;
        }
      }

      /// <summary>Field number for the "confidence" field.</summary>
      public const int ConfidenceFieldNumber = 12;
      private float confidence_;
      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public float Confidence {
        get { return confidence_; }
        set {
          confidence_ = value;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override bool Equals(object other) {
        return Equals(other as IdentifiedObject);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public bool Equals(IdentifiedObject other) {
        if (ReferenceEquals(other, null)) {
          return false;
        }
        if (ReferenceEquals(other, this)) {
          return true;
        }
        if (Type != other.Type) return false;
        if (Uid != other.Uid) return false;
        if (CenterX != other.CenterX) return false;
        if (CenterY != other.CenterY) return false;
        if (CenterZ != other.CenterZ) return false;
        if (TopX != other.TopX) return false;
        if (TopY != other.TopY) return false;
        if (TopZ != other.TopZ) return false;
        if (BottomX != other.BottomX) return false;
        if (BottomY != other.BottomY) return false;
        if (BottomZ != other.BottomZ) return false;
        if (Confidence != other.Confidence) return false;
        return true;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override int GetHashCode() {
        int hash = 1;
        if (Type.Length != 0) hash ^= Type.GetHashCode();
        if (Uid != 0) hash ^= Uid.GetHashCode();
        if (CenterX != 0F) hash ^= CenterX.GetHashCode();
        if (CenterY != 0F) hash ^= CenterY.GetHashCode();
        if (CenterZ != 0F) hash ^= CenterZ.GetHashCode();
        if (TopX != 0F) hash ^= TopX.GetHashCode();
        if (TopY != 0F) hash ^= TopY.GetHashCode();
        if (TopZ != 0F) hash ^= TopZ.GetHashCode();
        if (BottomX != 0F) hash ^= BottomX.GetHashCode();
        if (BottomY != 0F) hash ^= BottomY.GetHashCode();
        if (BottomZ != 0F) hash ^= BottomZ.GetHashCode();
        if (Confidence != 0F) hash ^= Confidence.GetHashCode();
        return hash;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public override string ToString() {
        return pb::JsonFormatter.ToDiagnosticString(this);
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void WriteTo(pb::CodedOutputStream output) {
        if (Type.Length != 0) {
          output.WriteRawTag(10);
          output.WriteString(Type);
        }
        if (Uid != 0) {
          output.WriteRawTag(16);
          output.WriteUInt32(Uid);
        }
        if (CenterX != 0F) {
          output.WriteRawTag(29);
          output.WriteFloat(CenterX);
        }
        if (CenterY != 0F) {
          output.WriteRawTag(37);
          output.WriteFloat(CenterY);
        }
        if (CenterZ != 0F) {
          output.WriteRawTag(45);
          output.WriteFloat(CenterZ);
        }
        if (TopX != 0F) {
          output.WriteRawTag(53);
          output.WriteFloat(TopX);
        }
        if (TopY != 0F) {
          output.WriteRawTag(61);
          output.WriteFloat(TopY);
        }
        if (TopZ != 0F) {
          output.WriteRawTag(69);
          output.WriteFloat(TopZ);
        }
        if (BottomX != 0F) {
          output.WriteRawTag(77);
          output.WriteFloat(BottomX);
        }
        if (BottomY != 0F) {
          output.WriteRawTag(85);
          output.WriteFloat(BottomY);
        }
        if (BottomZ != 0F) {
          output.WriteRawTag(93);
          output.WriteFloat(BottomZ);
        }
        if (Confidence != 0F) {
          output.WriteRawTag(101);
          output.WriteFloat(Confidence);
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public int CalculateSize() {
        int size = 0;
        if (Type.Length != 0) {
          size += 1 + pb::CodedOutputStream.ComputeStringSize(Type);
        }
        if (Uid != 0) {
          size += 1 + pb::CodedOutputStream.ComputeUInt32Size(Uid);
        }
        if (CenterX != 0F) {
          size += 1 + 4;
        }
        if (CenterY != 0F) {
          size += 1 + 4;
        }
        if (CenterZ != 0F) {
          size += 1 + 4;
        }
        if (TopX != 0F) {
          size += 1 + 4;
        }
        if (TopY != 0F) {
          size += 1 + 4;
        }
        if (TopZ != 0F) {
          size += 1 + 4;
        }
        if (BottomX != 0F) {
          size += 1 + 4;
        }
        if (BottomY != 0F) {
          size += 1 + 4;
        }
        if (BottomZ != 0F) {
          size += 1 + 4;
        }
        if (Confidence != 0F) {
          size += 1 + 4;
        }
        return size;
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(IdentifiedObject other) {
        if (other == null) {
          return;
        }
        if (other.Type.Length != 0) {
          Type = other.Type;
        }
        if (other.Uid != 0) {
          Uid = other.Uid;
        }
        if (other.CenterX != 0F) {
          CenterX = other.CenterX;
        }
        if (other.CenterY != 0F) {
          CenterY = other.CenterY;
        }
        if (other.CenterZ != 0F) {
          CenterZ = other.CenterZ;
        }
        if (other.TopX != 0F) {
          TopX = other.TopX;
        }
        if (other.TopY != 0F) {
          TopY = other.TopY;
        }
        if (other.TopZ != 0F) {
          TopZ = other.TopZ;
        }
        if (other.BottomX != 0F) {
          BottomX = other.BottomX;
        }
        if (other.BottomY != 0F) {
          BottomY = other.BottomY;
        }
        if (other.BottomZ != 0F) {
          BottomZ = other.BottomZ;
        }
        if (other.Confidence != 0F) {
          Confidence = other.Confidence;
        }
      }

      [global::System.Diagnostics.DebuggerNonUserCodeAttribute]
      public void MergeFrom(pb::CodedInputStream input) {
        uint tag;
        while ((tag = input.ReadTag()) != 0) {
          switch(tag) {
            default:
              input.SkipLastField();
              break;
            case 10: {
              Type = input.ReadString();
              break;
            }
            case 16: {
              Uid = input.ReadUInt32();
              break;
            }
            case 29: {
              CenterX = input.ReadFloat();
              break;
            }
            case 37: {
              CenterY = input.ReadFloat();
              break;
            }
            case 45: {
              CenterZ = input.ReadFloat();
              break;
            }
            case 53: {
              TopX = input.ReadFloat();
              break;
            }
            case 61: {
              TopY = input.ReadFloat();
              break;
            }
            case 69: {
              TopZ = input.ReadFloat();
              break;
            }
            case 77: {
              BottomX = input.ReadFloat();
              break;
            }
            case 85: {
              BottomY = input.ReadFloat();
              break;
            }
            case 93: {
              BottomZ = input.ReadFloat();
              break;
            }
            case 101: {
              Confidence = input.ReadFloat();
              break;
            }
          }
        }
      }

    }

  }
  #endregion

}

#endregion


#endregion Designer generated code
